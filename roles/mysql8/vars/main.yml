---
# Custom variables we use for our own servers for the mysql role
# Set this to the user ansible is logging in as - should have root
# or sudo access
mysql_user_home: /root
mysql_user_name: root
mysql_user_password: root

# Modular's root user for mysql
mysql_root_home: /root
mysql_root_username: mrdroot
mysql_root_password: 'Tertyu34%^UYX'
# mysql_root_password: '*80EBFA4EEE7FD7BFF9A477F9C44604F6C4FB5571'
# We can encrypt mysql password use below in sqlyog:
# SELECT PASSWORD('Tertyu34%^UYX');

# Custom settings for my.conf, different from default
# ========================================================================

# [client]
mysqlclient_max_allowed_packet: "512M"

# [mysqld]
# Connection settings different from default -----------------------------------
mrd_ports:
  mysql: "3306"
# If MySQL binds to 0.0.0.0, then any computer which is able to reach the server computer over the network will be able to connect.
mysql_bind_address: '0.0.0.0'
# encrypt you mysql connection
# mysql_require_secure_transport: "ON"

# If dns targeting is needed or not https://www.vionblog.com/skip-name-resolve-to-speed-up-mysql-and-avoid-problems/
# Do not resolve host names when checking client connections. Use only IP addresses. If you use this option, all Host column values in the grant tables must be IP addresses.
mysql_skip_name_resolve: off
# https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting
# The default SQL mode in MySQL 8.0 includes these modes: ONLY_FULL_GROUP_BY, STRICT_TRANS_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE, ERROR_FOR_DIVISION_BY_ZERO, and NO_ENGINE_SUBSTITUTION.
# mysql_sql_mode: STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ONLY_FULL_GROUP_BY
# mysql_sql_mode: ""
# Disabling symbolic-links is recommended to prevent assorted security risks
mysql_symbolic_links: 0

# When connection does not disconnect, it takes up connection number, So below we set timeout variables. We use to do kill processes manually.
# The number of seconds the server waits for activity on a noninteractive connection before closing it.
mysql_wait_timeout: 600
#The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake. The default value is 10 seconds.
#Increasing the connect_timeout value might help if clients frequently encounter errors of the form Lost connection to MySQL server at ''
mysql_connect_timeout: 600
#The number of seconds the server waits for activity on an interactive connection before closing it
mysql_interactive_timeout: 600
mysql_max_connect_errors: 10000

# Memory settings different from default --------------------------------------
# default values optimized ~512MB RAM, below are for RAM=4GB. So don't need to change host_vars if 4GB RAM, otherwise change them in host_vars. (memory size measurenment: 16M=16*1024*1024)

#  key_buffer_size is the size of the buffer used for index blocks. The key buffer is also known as the key cache.
# You can increase the value to get better index handling for all reads and multiple writes, for myiasm is 25%, for innodb 70%.
#  For innodb, generally 70% of RAM (So for 4GB ram, set it to 1 G (25%) to 2.5G (62.5%)
mysql_key_buffer_size: "2G"
# Maximum size of a sendable packet. Both the client and the server have their own max_allowed_packet variable. This is for server.
mysql_max_allowed_packet: "512M"
# The maximum permitted number of simultaneous client Sconnections.
mysql_max_connections: "500"

# The maximum size of internal in-memory temporary tables. The actual limit is determined from whichever of the values of tmp_table_size and max_heap_table_size is smaller.
# Increase the value if you do many advanced GROUP BY queries and you have lots of memory.
mysql_tmp_table_size: "64M"
mysql_max_heap_table_size: "64M"

# Each thread that does a sequential scan for a MyISAM table allocates a buffer of this size (in bytes) for each table it scans.
mysql_read_buffer_size: "1M"
# This variable is used for reads for multi-Range Read optimization. Setting the variable to a large value can improve ORDER BY performance by a lot. However, this is a buffer allocated for each client,
mysql_read_rnd_buffer_size: "4M"
# Each session that must perform a sort allocates a buffer of this size.
mysql_sort_buffer_size: "1M"
# The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans. However, normally, the best way to get fast joins is to add indexes.
mysql_join_buffer_size: "262144"
# The maximum permitted result length in bytes for the GROUP_CONCAT() function. The default is 1024.
mysql_group_concat_max_len: "1024"


# InnoDB settings different from default----------------------------------------
mysql_innodb_flush_method: O_DIRECT
# Set innodb_buffer_pool_size up to 70% of RAM but beware of setting too high
# For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.
# The default value for _instances is 8 when innodb_buffer_pool_size is greater than or equal to 1GB. Otherwise, the default is 1.
mysql_innodb_buffer_pool_size: "2G"  # 50% RAM
mysql_innodb_buffer_pool_instances: 2
# Set innodb_log_file_size to 25% of buffer pool size.
mysql_innodb_log_file_size: "512M"
mysql_innodb_log_buffer_size: "64M"

# Logging settings.
# The following variables have a default value depending on operating system.
# mysql_log_error: /var/log/mysql/mysql.err
# mysql_syslog_tag: mysql
# mysql_slow_query_log_file: /var/log/mysql-slow.log

# enable slow_query_log: You can use the slow query log to help determine which database queries take a long time to run.
mysql_slow_query_log: "1"   # ON
mysql_long_query_time: "2"

# Other settings-----------------------------------

# If set to 1, table names are stored in lowercase on disk and comparisons are not case sensitive.
mysql_lower_case_table_names: "1"
# Enable system scheduler, default on after 8.0.3
mysql_event_scheduler: "ON"

# mysqldump settings different from default-------------------------------------
mysqldump_max_allowed_packet: "1G"

#==============================================================================

# --------Mysql replication related configuration settings --------------------
# Replication related configurations are defined in repl-my.cnf
# repl-my.cnf will be templated to the includedir in role/mysql_repl.yaml during replication setup

#   log_bin: "mysql-bin"
#   log_bin_index: "mysql-bin.index"
#   binlog_format: ROW
#   expire_logs_days: 30
#   max_binlog_size: 100M
#   log_slave_updates: true
#   master_info_repository: table
#   relay_log_info_repository: table
#   gtid_mode: "on"
#   enforce_gtid_consistency: true

# ========vars required for mysql replication that are set in repl_vars.yml -===============
# repl_vars:
#
# - repl_name: dt_s1_s2  #froms1tos2
#   repl_tags: data or log
#
#   #server settings:
#   masterhost: s1
#   #masterport: 7878  # default mysql port
#   slavehost: s2
#   slaveport: repl_port1  # port on slavehost that is sshtunneled to masterhost's mysql port 7878
#
#   #mysql user for replication
#   repl_user: s1_s2 # user is given different priv on masterhost and slavehostport_forwardintomaster
#   # repl_user on masterhost has priv of replication slaves, for slaves to connect. repl_slaveuser.
#   # repl_user on slavehost has priv of replication agent, etc, for slaves to excute 'start slave'.
#
#   # other replication configuration:
#   replicate_wild_do_table:
#   - db.*
#   replicate_rewrite_db:
#   - "db_alias->db"

# These are in the vars/main in this whole
# replicate_wild_ignore_table:
# - mysql
# - information_schema
# - performance_schema
# - sys

# ==============vars required for mysql migration===============================
# # ----- vars required for mysql migration that are set in dbmig_vars.yml -----
# origin_server:
#   S1: 11.11.11.11
# mig_vars:
#   - { origin_server: "S1",  origin_db: "db1",  target_server: "S2",  target_db: "db1" }


# ==================== Custom mysql privgroups====================================
#
# We define the concept of mysql privroups.
# Mysql privgroups is a named collection of privileges that we have developed.
# It is equivalent to the role concept in mysql 8, only it is simpler to use and build. You grant privgroup like you grant priv.
#
# Below are privileges to choose from in mysql database:
# ALTER, ALTER ROUTINE,
# CREATE, CREATE ROUTINE, CREATE TABLESPACE, CREATE TEMPORARY TABLES, CREATE USER, CREATE VIEW,
# DROP, EVENT, EXECUTE, FILE, INDEX, LOCK TABLES, PROCESS, REFERENCES, RELOAD,
# SHOW DATABASES, SHOW VIEW,
# SHUTDOWN, SUPER, TRIGGER, UPDATE
# REPLICATION CLIENT, REPLICATION SLAVE --
# These two are not given defined roles, they are used directly in mysql replication.

# The values of different privgroups are defined below:

mysql_privgroup:
# 1. For use in: db_mig_from,pentaho_int_from, pentaho_wh_from, pentaho_rp_from
  dt_view1: SELECT
# 2. For use in: log_pm, web_rp
  dt_view2: SELECT,SHOW VIEW
# 3. For use in: log tables
  dt_insert: INSERT
# 4. For use in: scrapyonrivers, web_to_yh
  dt_entry: SELECT,INSERT,UPDATE
# 5. Pentaho related: pentaho_int_to, pentaho_wh_to, pentaho_rp_to
  dt_int: SELECT,INSERT,UPDATE,DROP
# 6. For use by: database designer (teammates)
  db_design: SELECT,CREATE,ALTER,DROP,CREATE VIEW,SHOW VIEW

# 7. For use in data migration only: for migration user (dbmiguser) at the receiving end
  db_mig_to: SELECT,INSERT,CREATE,CREATE VIEW,SHOW VIEW,LOCK TABLES,DROP,REFERENCES,ALTER
  db_mig_toplus: SUPER,RELOAD

# 8. For use in mysql replicaton:
  # On slavehost: repl_agent is user with ability to execute REPLICATION
  repl_agent: SELECT,REPLICATION CLIENT,SHOW DATABASES,SUPER,PROCESS
  repl_agentplus: CREATE,INSERT
  # On masterhost: replicationuser is a user with ability to look up replication master UUID.
  repl_user: REPLICATION SLAVE
  # Ref: https://docs.oracle.com/cd/E17952_01/mysql-monitor-2.3-en/mem-agent-rights.html

# 9. For use in app server:
  app_crucible: ALTER,CREATE,DELETE,DROP,INDEX,INSERT,LOCK TABLES,REFERENCES,SELECT,UPDATE

# 10. For use in percona:
  app_percona: "????????????????????????????"
  app_perconaplus: "????????????????????????????"

# 11. user to create view or triggers or procedures:
  # DROP privilege is not necessary, this privilege is to drop trigger/procedure when we need to alter them.

  # privileges for user who create view
  sys_view: CREATE VIEW,SELECT # The same privilege for both INVOKER and DEFINER type.

  # privileges for user who create trigger
  # trigger has no SQL SECURITY called INVOKER
  # The content the triggers need further privileges, such as INSERT,UPDATE
  sys_trigger: TRIGGER,SELECT

  # privileges for user who create event
  sys_event: EXECUTE

  # privileges for user who create procedure
  # The content the triggers need further privileges, such as SELECT,INSERT,UPDATE,CREATE
  # procedure whose SQL SECURITY = INVOKER only need "CREATE ROUTINE" priv
  sys_procedure: CREATE ROUTINE
  # But procedure whose SQL SECURITY = DEFINER need "CREATE ROUTINE" and "EXECUTE" priv
  run_procedure: EXECUTE
  # A privilege to create tables
  db_create: CREATE
