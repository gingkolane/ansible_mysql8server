---
# ==============================================================================
# This role is to set up database migration
# Main steps:
# 1. Prepare origin Servers, run oldserver_dbmiguser.sql manually
# 2. Prepare target Servers
#    create dbmig user and dump folder
# 3. create ssh tunnel between origin data server [remote] and target data server [local]
# 4. start database migration
# 4.1 dump file from origin servers
# 4.2 import file from target servers
# 4.3 delete dbmig_user and dump files
# ==============================================================================



# 1. Prepare origin Servers, run oldserver_dbmiguser.sql-----------------------


# 1.1 create dbmiguser in origin servers by running oldserver_dbmiguser.sql on sqlyog
#     This could be done in ansible, but because of max host limitation
#     of ansible tower, we are using sql

# 1.2. set mysql enviroment varialbes on origin server
#      we can set this using sql in oldserver_dbmiguser.sql
#      https://dev.mysql.com/doc/refman/5.7/en/set-variable.html

#-------------------------------------------------------------------------------

# 2. Prepare target Servers ----------------------------------------------------

# 2.1 create dbmiguser mysql user on all target servers
- name: login with root user .my.cnf, copy root user .my.cnf password credentials
  template:
    src: root-my.cnf.j2
    dest: "{{ mysql_root_home }}/.my.cnf"
    # dest: ~/.my.cnf
    mode: 0600

- name: Create dbmig user on target server [using root user]
  mysql_user:
    name: dbmigusr
    password: "{{ password_vault.mysql_user.dbmigusr }}"
    host: "localhost"
    priv: "{{ item.target_db }}.*:{{ mysql_privgroup.db_mig_to }}/*.*:{{ mysql_privgroup.db_mig_toplus }}"
    state: present

# 2.2 make sure mysqldump settings in set in my.cnf in target Servers

# what are the settings for mysqldump related to dbmig

# mysqldump setting is in my.cnf in local server

#2.3 create temprary folders to put mysql dump files
- name: create folder for mysql dump files on target server
  file:
    path: mysqltmp
    state: directory


#-------------------------------------------------------------------------------
# 3. create ssh forwarding between origin server and target server-------------

- name: call sshtunnel role to create the dbmig ssh tunnel
  include_role:
    name: sshforwarding
    tasks_from: create
  vars:
    sshforwarding:
      remote_server: "{{ origin_server[item.origin_server] }}"
      # origin server is defined in mig_vars in host_vars/dbmig_vars
      remote_port: "{{ mysql_port }}"
      # this is default mysql_port which defined in group_vars/All
      local_port: "{{ dbmig_port }}"
      # this is our default dbmig_port which is defined in group_vars/All

#-------------------------------------------------------------------------------
# 4. Create origin servers' mysql database dump file,
#    and deposit them into target server's mysqltemp servers into target server directly
#    So no dmp file in origin server, dmp directly in target servers

# 4.1 dump file from origin servers ---------------

- name: Dump {{ origin_db }} databases into SQL file from the origin server
  mysql_db:
    login_host: "127.0.0.1"
    login_port: "{{ dbmig_port }}"
    login_user: dbmigusr
    login_password: "{{ password_vault.mysql_user.dbmigusr }}"
    state: dump
    name: "{{ item.origin_db }}"
    target: "mysqltmp/{{ item.target_db }}.sql"
  register: mysqldump_result
  until: mysqldump_result | succeeded
  retries: 10
  delay: 10
- debug: msg="{{ mysqldump_result }}"

- name: close sshtunneling, without deleting sshtunnel user
  include_role:
    name: sshforwarding
    tasks_from: close
  vars:
    sshforwarding:
      local_port: "{{ dbmig_port }}"

# 4.2 import file from target servers ---------------

- name: Ensure target database is existing [using root user]
  mysql_db:
    name: "{{ item.target_db }}"
    encoding: utf8
    collation: utf8_general_ci
    state: present

- name: Import SQL file into {{ target_db }} database on target server [using dbmiguser]
  mysql_db:
    login_user: dbmigusr
    login_password: "{{ password_vault.mysql_user.dbmigusr }}"
    state: import
    name: "{{ item.target_db }}"
    target: "mysqltmp/{{ item.target_db }}.sql"
  when: mysqldump_result | succeeded
  register: mysqlimport_result
  until: mysqlimport_result | succeeded
  retries: 10
  delay: 10
- debug: msg="{{ mysqlimport_result }}"

# 4.3 delete dbmig_user and dump files ---------------
- name: Delete dbmig user on target server [using root user]
  mysql_user:
    name: dbmigusr
    host_all: yes
    state: absent

- name: Delete temprary dump files from the target server
  file:
    path: "mysqltmp/{{ item.target_db }}.sql"
    state: absent
