---
# ==============================================================================
# This code is to create users

# - name: Ensure MySQL users are present.
#   mysql_user:
#     name: "{{ item.name }}"
#     host: "{{ item.host | default('localhost') }}"
#     password: "{{ item.password }}"
#     priv: "{{ item.priv | default('*.*:USAGE') }}"
#     state: "{{ item.state | default('present') }}"
#     append_privs: "{{ item.append_privs | default('no') }}"
#     encrypted: "{{ item.encrypted | default('no') }}"
#   with_items: "{{ mysql_user }}"
#   no_log: true
# ==============================================================================

# -------------- create and delete users --------------------------
# - name: Delete users
#   mysql_user:
#     name: "{{ item.name }}"
#     host: "{{ item.host|default('localhost') }}"
#     state: absent
#   with_items:
#     - "{{ mysql_user }}"
#   when: mysql_user|default('') != '' and item.state == 'absent'

- name: Create users - with database and table level privs
  mysql_user:
    name: "{{ item[0].name }}"
    # password: "{{ password_vault.mysql_user[item[0].name]|default(password_vault.mysql_user.default) }}"
    password: "{{ item[0].password|default('') }}"
    host: "{{ item[0].host|default('localhost') }}"
    priv: "{{ item[1].db }}.{{ item[1].tb|default('*') }}:{{ mysql_privgroup[item[1].privgroup] }}"
    append_privs: yes
    state: present
    login_user: "{{ db_rootuser_name }}"
    login_password: "{{ db_rootuser_password }}"
  with_subelements:
    - "{{ db_users }}"
    - priv
  when: (db_users is defined) and item[0].state == 'present' and (item[1].cl is undefined)

# - name: Create users - with column privs
#   shell: mysql -NBe "GRANT {{ item[1].privgroup }}({{ item[1].cl }}) ON {{ item[1].db }}.{{ item[1].tb }} TO '{{ item[0].name }}'@'{{ item[0].host }}'"
#   with_subelements:
#     - "{{ db_users }}"
#     - priv
#   when: (db_users is defined) and item[0].state == 'present' and (item[1].cl is defined)



#  -----------------Assign mysql roles to user---------------------------

# mysql_role is stored in the user table of mysql and is considered a composite user.
#6.3.4 Using Roles
# A MySQL role is a named collection of privileges.

# The following list summarizes role-management capabilities provided by MySQL:
#
# Step 1: CREATE ROLE and DROP ROLE enable roles to be created and removed.
# Step 2: GRANT and REVOKE enable privilege assignment and revocation for user accounts and roles.
# Step 3: SET DEFAULT ROLE specifies which account roles are active by default.
# Step 4: The mandatory_roles and activate_all_roles_on_login system variables enable defining mandatory roles and automatic activation of granted roles when users log in to the server.

# Ansible does not have a module for mysql role creation at if 10/25/2018 because role is a new concept in mysql8
# If we want to use roles, we have to use sql commands directly with four steps to integrate the role concept into our code base.
# Our previous way of using combined privgroup, seems much easier.
# So we will keep using our own priv group design until when ansible has role module and its usage easier.

# Other role related sql command:
#  SHOW GRANTS displays privilege and role assignments for user accounts and roles.
#  SET ROLE changes the active roles within the current session.
# The CURRENT_ROLE() function displays the active roles within the current session.
